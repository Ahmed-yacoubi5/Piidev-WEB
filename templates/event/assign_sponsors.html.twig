{% extends 'base.html.twig' %}

{% block title %}Assign Sponsors{% endblock %}

{% block body %}
<div class="container-xxl flex-grow-1 container-p-y">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card">
        <h5 class="card-header">Assign Sponsors to Event <strong>{{ event.title }}</strong></h5>
        <div class="card-body">
          <div class="mb-4">
            <label for="sponsorSelect" class="form-label">Select Sponsors</label>
            <select id="sponsorSelect" class="form-select" multiple>
              {% for sponsor in sponsors %}
                <option value="{{ sponsor.id }}" {% if sponsor in event.sponsors %}selected{% endif %}>
                  {{ sponsor.name }}
                </option>
              {% endfor %}
            </select>
          </div>

          <div class="d-flex justify-content-end">
            <button type="button" id="assignButton" class="btn btn-primary" onclick="assignSponsors()">
              <i class="bx bx-check-circle me-1"></i> Assign Sponsors
            </button>
          </div>
        </div>

        <hr class="m-0" />
        <div class="card-body">
          <h6 class="card-title mb-3">Currently Assigned Sponsors</h6>
          <div id="assignedSponsors">
            {% include 'event/_assigned_sponsors.html.twig' with { sponsors: event.sponsors } %}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div aria-live="polite" aria-atomic="true" class="position-fixed top-0 end-0 p-3" style="z-index: 1080">
  <div id="eventToastContainer"></div>
</div>

<script>
  function assignSponsors() {
    const assignBtn = document.getElementById("assignButton");
    assignBtn.disabled = true;
    assignBtn.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Assigning...`;

    const selectedSponsorIds = Array.from(document.getElementById("sponsorSelect").selectedOptions).map(opt => opt.value);

    fetch("{{ path('app_event_assign_sponsors', {'id': event.id}) }}", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest"
      },
      body: JSON.stringify({ sponsorIds: selectedSponsorIds })
    })
    .then(res => {
      if (!res.ok) throw new Error("Assignment failed");
      return res.json();
    })
    .then(data => {
      showToast("Sponsors assigned successfully!", "primary");

      const assignedDiv = document.getElementById("assignedSponsors");
      assignedDiv.innerHTML = data.updatedSponsorsHtml;

    })
    .catch(err => {
      showToast("Failed to assign sponsors", "danger");
    })
    .finally(() => {
      assignBtn.disabled = false;
      assignBtn.innerHTML = `<i class="bx bx-check-circle me-1"></i> Assign Sponsors`;
    });
  }

  function showToast(message, type = 'primary') {
    const container = document.getElementById("eventToastContainer");

    const toastId = `toast-${Date.now()}`;
    const toastHTML = `
      <div id="${toastId}" class="bs-toast toast fade show bg-${type}" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
          <i class="bx bx-bell me-2"></i>
          <div class="me-auto fw-medium">Event Manager</div>
          <small>Just now</small>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">${message}</div>
      </div>
    `;

    container.insertAdjacentHTML("beforeend", toastHTML);
    const toastElement = document.getElementById(toastId);
    const bsToast = new bootstrap.Toast(toastElement);
    bsToast.show();
    setTimeout(() => toastElement.remove(), 5000);
  }
  function removeSponsor(sponsorId) {
  fetch(`{{ path('app_event_remove_sponsor', { id: event.id }) }}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Requested-With': 'XMLHttpRequest'
    },
    body: JSON.stringify({ sponsorId: sponsorId })
  })
  .then(res => {
    if (!res.ok) throw new Error('Failed to remove sponsor');
    return res.json();
  })
  .then(data => {
    document.getElementById('assignedSponsors').innerHTML = data.updatedSponsorsHtml;
    showToast('Sponsor removed successfully!', 'warning');
  })
  .catch(err => {
    showToast('Failed to remove sponsor', 'danger');
  });
}
</script>
{% endblock %}
